import axios from "axios";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { Products } from "@/services/types";

const BASE_URL_2 = "http://14.225.198.232:8080/api/v1";

export const getProductsByShop = async (pageNumber = 1, pageSize = 10) => {
  try {
      const access_token = await AsyncStorage.getItem("access_token");
      if (!access_token) {
          throw new Error("Access token is not found");
      }

      const response = await axios.get(`${BASE_URL_2}/products/shop`, {
          params: { pageNumber, pageSize },
          headers: {
              Authorization: `Bearer ${access_token}`,
              "Content-Type": "application/json"
          }
      });

      console.log("get product by shop data:", response.data); // Check the response structure

      if (response.data.success) {
          if (response.data) {
              return response.data.data.items; // Ensure this returns an object with products array
          } else {
              throw new Error("D·ªØ li·ªáu s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá.");
          }
      } else {
          throw new Error(response.data.message || "Failed to fetch products");
      }
  } catch (error) {
      console.error("Error fetching products:", error);
      throw error;
  }
};

// T·∫°o s·∫£n ph·∫©m m·ªõi
export const createProduct = async (productData: Partial<Products>): Promise<any> => {
  try {
      const access_token = await AsyncStorage.getItem("access_token");
      if (!access_token) {
          throw new Error("Access token is missing. Please log in again.");
      }

      // T·∫°o FormData
      const formData = new FormData();
      formData.append("name", productData.name || "");
      formData.append("price", productData.price?.toString() || "0");
      formData.append("stock", productData.stock?.toString() || "0");
      formData.append("categoryId", productData.categoryId || "");
      formData.append("brand", productData.brand || "");
      formData.append("description", productData.description || "");
      formData.append("expiry", productData.expiry || "");

      // Ki·ªÉm tra n·∫øu c√≥ ·∫£nh th√¨ th√™m v√†o FormData
      if (productData.image && typeof productData.image === "object" && "uri" in productData.image) {
          formData.append("image", {
              uri: productData.image.uri,
              type: productData.image.type,
              name: productData.image.fileName || "image.jpg",
          } as any); // TypeScript c√≥ th·ªÉ c·∫ßn `as any` ƒë·ªÉ tr√°nh l·ªói ki·ªÉu d·ªØ li·ªáu
      }

      console.log("FormData Sent:", formData);

      const response = await axios.post(`${BASE_URL_2}/products`, formData, {
          headers: {
              Authorization: `Bearer ${access_token}`,
              "Content-Type": "multipart/form-data",
          },
      });

      console.log("Product Created Successfully:", response.data);
      return response.data;
  } catch (error: any) {
      console.error("L·ªói khi th√™m s·∫£n ph·∫©m:", error);
      throw error;
  }
};

// L·∫•y th√¥ng tin s·∫£n ph·∫©m theo id
export const getProductById = async (id: string): Promise<Products | null> => {
    try {
      const access_token = await AsyncStorage.getItem("access_token");
      if (!access_token) {
        throw new Error("Access token is not found");
      }
  
      const response = await axios.get(`${BASE_URL_2}/products/${id}`, {
        headers: {
          Authorization: `Bearer ${access_token}`,
          "Content-Type": "application/json",
        },
      });
  
      console.log("get product by id data:", response.data); // Check the response structure
  
      if (response.data.success) {
        return response.data.data || null; // Return the product data if success
      } else {
        throw new Error(response.data.message || "Failed to fetch product");
      }
    } catch (error) {
      console.error("Error fetching product by id:", error);
      throw error;
    }
  };
  
  export const editProductById = async (id: string, productData: Partial<Products>): Promise<any> => {
    try {
      const access_token = await AsyncStorage.getItem("access_token");
      if (!access_token) {
        throw new Error("Access token is not found");
      }
  
      // T·∫°o FormData
      const formData = new FormData();
  
      // Th√™m c√°c tr∆∞·ªùng d·ªØ li·ªáu v√†o FormData
      if (productData.name) formData.append("name", productData.name);
      if (productData.price !== undefined) formData.append("price", productData.price.toString());
      if (productData.stock !== undefined) formData.append("stock", productData.stock.toString());
      if (productData.categoryId) formData.append("categoryId", productData.categoryId);
      if (productData.brand) formData.append("brand", productData.brand);
      if (productData.description) formData.append("description", productData.description);
      if (productData.expiry) formData.append("expiry", productData.expiry);
  
      // Th√™m ·∫£nh v√†o FormData n·∫øu c√≥
      if (productData.image && typeof productData.image === "object" && "uri" in productData.image) {
        formData.append("image", {
          uri: productData.image.uri,
          type: productData.image.type || "image/jpeg", // M·∫∑c ƒë·ªãnh l√† JPEG n·∫øu kh√¥ng c√≥ type
          name: productData.image.fileName || "image.jpg",
        } as any);
      }
  
      // Log d·ªØ li·ªáu g·ª≠i ƒëi
      console.log("üöÄ FormData g·ª≠i ƒëi:");
      //@ts-ignore
      formData._parts.forEach((part) => {
        console.log(`${part[0]}:`, part[1]);
      });
  
      // G·ª≠i request PATCH
      const response = await axios.patch(`${BASE_URL_2}/products/${id}`, formData, {
        headers: {
          Authorization: `Bearer ${access_token}`,
          "Content-Type": "multipart/form-data",
        },
      });
  
      console.log("‚úÖ Product Edited Successfully:", response.data);
      return response.data;
    } catch (error: any) {
      console.error("‚ùå L·ªói khi ch·ªânh s·ª≠a s·∫£n ph·∫©m:", error);
      throw error;
    }
  };
  
  export const getAllCategories = async (): Promise<any[]> => {
    const accessToken = AsyncStorage.getItem("access_token");
    if (!accessToken) throw new Error("Ch∆∞a c√≥ access_token");
  
    try {
      const response = await axios.get(`${BASE_URL_2}/categories`, {
        headers: {
          Authorization: `Bearer ${accessToken}`,
        },
      });
      return response.data.data.items || [];
    } catch (error) {
      console.error("L·ªói l·∫•y danh m·ª•c:", error);
      return [];
    }
  };
  
